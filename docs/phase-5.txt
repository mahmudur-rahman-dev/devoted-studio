# Phase 5: Navigation & Linking Updates - Smart Implementation Guide

## PHASE 5: Replace React Router with Next.js Navigation

ðŸŽ¯ **GOAL:** Convert all navigation from React Router to Next.js patterns

### Step 5.1: Start Phase 5 Branch & Create Rollback Point
```bash
git checkout -b nextjs-migration-phase5
git add .
git commit -m "Phase 5 starting point - navigation conversion begins"
```

---

## SUB-PHASE 5A: Advanced Navbar Updates (Medium Risk)

### Step 5A.1: Complete Navbar Navigation Conversion
**EDIT `components/layout/Navbar.tsx`:**

**FIND the 'use client' directive (if missing, add it at the top):**
```tsx
import React, { useState, useEffect } from "react";
```

**REPLACE with:**
```tsx
'use client'
import React, { useState, useEffect } from "react";
```

**VERIFY the imports are correct from Phase 4:**
```tsx
import Link from "next/link";
import { usePathname } from "next/navigation";
```

**FIND any remaining React Router patterns and verify they're converted:**
- `useLocation` should be `usePathname`
- `location.pathname` should be `pathname`
- `Link from "react-router-dom"` should be `Link from "next/link"`

### Step 5A.2: Fix Hash-based Navigation in Navbar
**EDIT `components/layout/Navbar.tsx`:**

**FIND links that have hash fragments (like `#services`, `#contact`):**
```tsx
{
  label: "Services",
  to: "/#services",
  // ... other properties
}
```

**These should stay as-is** - Next.js handles hash navigation properly.

**FIND the Link rendering logic and ensure it handles hash links properly:**

**FOR hash links, ensure they work with Next.js:**
```tsx
<Link
  href={link.to}  // This should work for both "/about" and "/#services"
  className={/* ... */}
>
  {link.label}
</Link>
```

### Step 5A.3: Test Navbar Navigation
```bash
npm run dev
# Test clicking each navigation item:
# âœ“ Home
# âœ“ Services (should scroll to services section)
# âœ“ Portfolio
# âœ“ How we work
# âœ“ About
# âœ“ Contact
# âœ“ Dropdown items (Residential/Commercial)
```

### Step 5A.4: Commit Navbar Changes
```bash
git add .
git commit -m "Phase 5A: Complete Navbar navigation conversion"
```

---

## SUB-PHASE 5B: Footer Navigation Updates (Low Risk)

### Step 5B.1: Update Footer Links
**EDIT `components/layout/Footer.tsx`:**

**VERIFY the Next.js import is correct from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND all Link components and ensure they use `href` instead of `to`:**

**FIND patterns like:**
```tsx
<Link to="/portfolio" className="...">
  Portfolio
</Link>
```

**REPLACE with:**
```tsx
<Link href="/portfolio" className="...">
  Portfolio
</Link>
```

**UPDATE all footer links to use `href`:**
- Home: `href="/"`
- How we work: `href="/how-we-work"`
- Portfolio: `href="/portfolio"`
- About: `href="/about"`
- Contact: `href="/contact"`
- Service hash links: `href="/#residential"`, `href="/#commercial"`, etc.

### Step 5B.2: Test Footer Navigation
```bash
npm run dev
# Test clicking each footer link
# Should navigate correctly to each page
```

### Step 5B.3: Commit Footer Changes
```bash
git add .
git commit -m "Phase 5B: Update Footer navigation links"
```

---

## SUB-PHASE 5C: Section Component Navigation Updates (Medium Risk)

### Step 5C.1: Update MainHero Component
**EDIT `components/sections/MainHero.tsx`:**

**FIND any Link imports:**
```tsx
import { Link } from "react-router-dom";
```

**REPLACE with:**
```tsx
import Link from "next/link";
```

**FIND Link components and update to use `href`:**
```tsx
<Link to="#contact" className="...">
  Book A Meeting
</Link>
```

**REPLACE with:**
```tsx
<Link href="#contact" className="...">
  Book A Meeting
</Link>
```

### Step 5C.2: Update Projects Component
**EDIT `components/sections/Projects.tsx`:**

**FIND any internal navigation links:**
```tsx
<Link to="#contact" className="...">
  View All Projects
</Link>
```

**REPLACE with:**
```tsx
<Link href="#contact" className="...">
  View All Projects
</Link>
```

### Step 5C.3: Update Services Component
**EDIT `components/sections/Services.tsx`:**

**CHECK for any Link imports and internal navigation** - Most section components don't have navigation, but verify.

### Step 5C.4: Update CTA Component
**EDIT `components/sections/Cta.tsx`:**

**FIND any Link components:**
```tsx
<Link to="#contact" className="...">
  Book a Meeting
</Link>
```

**REPLACE with:**
```tsx
<Link href="#contact" className="...">
  Book a Meeting
</Link>
```

### Step 5C.5: Update About Component
**EDIT `components/sections/About.tsx`:**

**FIND any Link components:**
```tsx
<Link to="/contact" className="...">
  Book a Meeting
</Link>
```

**REPLACE with:**
```tsx
<Link href="/contact" className="...">
  Book a Meeting
</Link>
```

### Step 5C.6: Test Section Navigation
```bash
npm run dev
# Test home page - click all CTA buttons and links
# Should navigate or scroll to correct sections
```

### Step 5C.7: Commit Section Changes
```bash
git add .
git commit -m "Phase 5C: Update section component navigation"
```

---

## SUB-PHASE 5D: Feature Component Navigation Updates (High Risk)

### Step 5D.1: Update Portfolio Component
**EDIT `components/features/Portfolio.tsx`:**

**VERIFY the Next.js import from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND all Link components and ensure they use `href`:**

**FIND project detail links:**
```tsx
<Link
  to={`/project/${project.id}`}
  className="..."
>
```

**REPLACE with:**
```tsx
<Link
  href={`/project/${project.id}`}
  className="..."
>
```

**FIND the "Show All" button:**
```tsx
<Link
  to="/portfolio"
  className="..."
>
  Show All
</Link>
```

**REPLACE with:**
```tsx
<Link
  href="/portfolio"
  className="..."
>
  Show All
</Link>
```

### Step 5D.2: Update HowWeWork Component
**EDIT `components/features/HowWeWork.tsx`:**

**VERIFY the Next.js import from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND all Link components:**
```tsx
<Link to="/contact" className="...">
  Get a Quote
</Link>
```

**REPLACE with:**
```tsx
<Link href="/contact" className="...">
  Get a Quote
</Link>
```

### Step 5D.3: Update WhyChooseUs Component
**EDIT `components/features/WhyChooseUs.tsx`:**

**FIND any Link components:**
```tsx
<Link to="#contact" className="...">
  Book a Consultation
</Link>
```

**REPLACE with:**
```tsx
<Link href="#contact" className="...">
  Book a Consultation
</Link>
```

### Step 5D.4: Update ApproachTabs Component
**EDIT `components/features/ApproachTabs.tsx`:**

**CHECK for any Link imports and components** - This component likely doesn't have navigation, but verify.

### Step 5D.5: Test Feature Component Navigation
```bash
npm run dev
# Test:
# âœ“ Portfolio page - click on project items
# âœ“ How we work page - click CTA buttons
# âœ“ Home page - test WhyChooseUs section buttons
```

### Step 5D.6: Commit Feature Changes
```bash
git add .
git commit -m "Phase 5D: Update feature component navigation"
```

---

## SUB-PHASE 5E: Service Page Navigation Updates (Medium Risk)

### Step 5E.1: Update Residential Interior Page
**EDIT `app/residential-interior/page.tsx`:**

**VERIFY the Next.js import from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND all Link components and update to use `href`:**
```tsx
<Link to="#approach" className="...">
  Explore
</Link>
```

**REPLACE with:**
```tsx
<Link href="#approach" className="...">
  Explore
</Link>
```

### Step 5E.2: Update Commercial Interior Page
**EDIT `app/commercial-interior/page.tsx`:**

**VERIFY the Next.js import from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND all Link components:**
```tsx
<Link to="#offerings" className="...">
  Explore
</Link>
```

**REPLACE with:**
```tsx
<Link href="#offerings" className="...">
  Explore
</Link>
```

### Step 5E.3: Test Service Page Navigation
```bash
npm run dev
# Test:
# âœ“ http://localhost:3000/residential-interior
# âœ“ http://localhost:3000/commercial-interior
# Click all navigation buttons and links
```

### Step 5E.4: Commit Service Page Changes
```bash
git add .
git commit -m "Phase 5E: Update service page navigation"
```

---

## SUB-PHASE 5F: Project Detail Page Navigation (Medium Risk)

### Step 5F.1: Update Project Detail Navigation
**EDIT `app/project/[id]/page.tsx`:**

**VERIFY the Next.js import from Phase 4:**
```tsx
import Link from "next/link";
```

**FIND the "Other Projects" section links:**
```tsx
<Link
  to={`/project/${otherProject.id}`}
  className="..."
>
```

**REPLACE with:**
```tsx
<Link
  href={`/project/${otherProject.id}`}
  className="..."
>
```

### Step 5F.2: Update Not Found Page
**EDIT `app/project/[id]/not-found.tsx`:**

**VERIFY the Link import and usage:**
```tsx
import Link from 'next/link'

// In component:
<Link 
  href="/portfolio" 
  className="..."
>
  Back to Portfolio
</Link>
```

### Step 5F.3: Test Project Detail Navigation
```bash
npm run dev
# Test:
# âœ“ http://localhost:3000/project/1
# âœ“ Click on "Other Projects" links
# âœ“ Test invalid project ID (should show not-found page)
# âœ“ Click "Back to Portfolio" on not-found page
```

### Step 5F.4: Commit Project Detail Changes
```bash
git add .
git commit -m "Phase 5F: Update project detail navigation"
```

---

## SUB-PHASE 5G: Final Navigation Testing & Cleanup

### Step 5G.1: Comprehensive Navigation Test
```bash
npm run dev

# Test ALL navigation systematically:
# 1. Navbar navigation (all items)
# 2. Footer navigation (all links)
# 3. Home page CTAs and section links
# 4. Portfolio navigation (project links)
# 5. Service page navigation
# 6. Project detail navigation
# 7. Hash-based scrolling (same-page links)
# 8. Back/forward browser buttons
```

### Step 5G.2: Search for Remaining React Router Patterns
```bash
# Search for any remaining React Router imports
grep -r "react-router-dom" components/ app/ lib/ || echo "No React Router imports found âœ“"

# Search for any remaining 'to=' props
grep -r 'to=' components/ app/ lib/ || echo "No 'to' props found âœ“"

# Search for useLocation usage
grep -r "useLocation" components/ app/ lib/ || echo "No useLocation usage found âœ“"

# Search for useParams usage (should only be in contexts where it's been replaced)
grep -r "useParams" components/ app/ lib/ || echo "No useParams usage found âœ“"
```

### Step 5G.3: Test Hash Navigation Specifically
```bash
npm run dev
# Test these specific hash links:
# âœ“ Home -> Services (/#services)
# âœ“ Home -> Contact (/#contact)
# âœ“ Footer service links (/#residential, /#commercial)
# âœ“ CTA buttons that scroll to contact section
# âœ“ Residential page internal hash navigation
```

### Step 5G.4: Build Test
```bash
# Test production build with new navigation
npm run build

# Should complete without errors
# Navigation should work in production build
npm start
# Test a few key navigation flows
```

### Step 5G.5: Final Phase 5 Commit
```bash
git add .
git commit -m "Phase 5G: Complete navigation system conversion to Next.js"
```

---

## SUCCESS CRITERIA FOR PHASE 5:

### âœ… Phase 5 Success Indicators:
- [ ] All navigation links work correctly (no broken links)
- [ ] Hash-based navigation scrolls to correct sections
- [ ] Active link highlighting works in Navbar
- [ ] Back/forward browser buttons work properly
- [ ] No React Router imports remain in codebase
- [ ] No console errors related to navigation
- [ ] `npm run build` completes successfully
- [ ] All CTA buttons navigate to correct destinations

### âœ… Navigation Pattern Conversion Complete:
- [ ] `react-router-dom` â†’ `next/link`
- [ ] `useLocation` â†’ `usePathname`
- [ ] `useParams` â†’ `params` prop
- [ ] `to=` â†’ `href=`
- [ ] `Link to="/path"` â†’ `Link href="/path"`

### ðŸš¨ Expected Issues (NORMAL):
- **Some styling differences in active states** (can be polished later)
- **Minor differences in scroll behavior** (Next.js handles scrolling slightly differently)
- **Build warnings about unused imports** (normal cleanup)

### ðŸ”´ Critical Errors (ROLLBACK IF THESE OCCUR):
- Navigation completely breaks (links don't work)
- Hash navigation fails entirely
- Pages become inaccessible through navigation
- Build fails due to navigation-related errors

### ðŸŽ¯ Phase 5 Success = NAVIGATION COMPLETE!
With Phase 5 complete, your app now uses modern Next.js navigation patterns exclusively. The user experience should be seamless and faster than the previous React Router implementation.

**Ready for Phase 6: Dynamic Routing & Data (High complexity but focused scope)**